{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2025-59340.json"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "079872bbf190830b8d455b19827463a0c745b9fd"
            },
            {
              "fixed": "66df351e7e8ad71ca04dcacb4b65782af820b8b1"
            }
          ],
          "repo": "https://github.com/hubspot/jinjava",
          "type": "GIT"
        }
      ],
      "versions": [
        "jinjava-1.0.0",
        "jinjava-1.0.1",
        "jinjava-1.0.2",
        "jinjava-1.0.3",
        "jinjava-1.0.4",
        "jinjava-1.0.5",
        "jinjava-1.0.6",
        "jinjava-1.0.7",
        "jinjava-1.0.8",
        "jinjava-1.0.9",
        "jinjava-2.0.0",
        "jinjava-2.0.1",
        "jinjava-2.0.2",
        "jinjava-2.0.3",
        "jinjava-2.0.4",
        "jinjava-2.0.5",
        "jinjava-2.5.10",
        "jinjava-2.5.3",
        "jinjava-2.5.4",
        "jinjava-2.5.5",
        "jinjava-2.5.6",
        "jinjava-2.5.7",
        "jinjava-2.5.8",
        "jinjava-2.6.0",
        "jinjava-2.7.0",
        "jinjava-2.7.1",
        "jinjava-2.7.2",
        "jinjava-2.7.3",
        "jinjava-2.7.4",
        "jinjava-2.8.0"
      ]
    }
  ],
  "aliases": [
    "GHSA-m49c-g9wr-hv6v"
  ],
  "details": "jinjava is a Java-based template engine based on django template syntax, adapted to render jinja templates. Priori to 2.8.1, by using mapper.getTypeFactory().constructFromCanonical(), it is possible to instruct the underlying ObjectMapper to deserialize attacker-controlled input into arbitrary classes. This enables the creation of semi-arbitrary class instances without directly invoking restricted methods or class literals. As a result, an attacker can escape the sandbox and instantiate classes such as java.net.URL, opening up the ability to access local files and URLs(e.g., file:///etc/passwd). With further chaining, this primitive can potentially lead to remote code execution (RCE). This vulnerability is fixed in 2.8.1.",
  "id": "CVE-2025-59340",
  "modified": "2025-09-26T09:02:47.814837Z",
  "published": "2025-09-17T20:15:36Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://github.com/HubSpot/jinjava/releases/tag/jinjava-2.8.1"
    },
    {
      "type": "ADVISORY",
      "url": "https://github.com/HubSpot/jinjava/security/advisories/GHSA-m49c-g9wr-hv6v"
    },
    {
      "type": "FIX",
      "url": "https://github.com/HubSpot/jinjava/commit/66df351e7e8ad71ca04dcacb4b65782af820b8b1"
    }
  ],
  "schema_version": "1.7.3"
}