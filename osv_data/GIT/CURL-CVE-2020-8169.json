{
  "id": "CURL-CVE-2020-8169",
  "summary": "Partial password leak over DNS on HTTP redirect",
  "details": "libcurl can be tricked to prepend a part of the password to the hostname\nbefore it resolves it, potentially leaking the partial password over the\nnetwork and to the DNS server(s).\n\nlibcurl can be given a username and password for HTTP authentication when\nrequesting an HTTP resource - used for HTTP Authentication such as Basic,\nDigest, NTLM and similar. The credentials are set, either together with\n`CURLOPT_USERPWD` or separately with `CURLOPT_USERNAME` and\n`CURLOPT_PASSWORD`. Important detail: these strings are given to libcurl as\nplain C strings and they are not supposed to be URL encoded.\n\nIn addition, libcurl also allows the credentials to be set in the URL, using\nthe standard RFC 3986 format: `http://user:password@host/path`. In this case,\nthe name and password are URL encoded as that is how they appear in URLs.\n\nIf the options are set, they override the credentials set in the URL.\n\nInternally, this is handled by storing the credentials in the \"URL object\" so\nthat there is only a single set of credentials stored associated with this\nsingle URL.\n\nWhen libcurl handles a relative redirect (as opposed to an absolute URL\nredirect) for an HTTP transfer, the server is only sending a new path to the\nclient and that path is applied on to the existing URL. That \"applying\" of the\nrelative path on top of an absolute URL is done by libcurl first generating a\nfull absolute URL out of all the components it has, then it applies the\nredirect and finally it deconstructs the URL again into its separate\ncomponents.\n\nThis security vulnerability originates in the fact that curl did not correctly\nURL encode the credential data when set using one of the `curl_easy_setopt`\noptions described above. This made curl generate a badly formatted full URL\nwhen it would do a redirect and the final re-parsing of the URL would then go\nbad and wrongly consider a part of the password field to belong to the host\nname.\n\nThe wrong hostname would then be used in a name resolve lookup, potentially\nleaking the hostname + partial password in clear text over the network (if\nplain DNS was used) and in particular to the used DNS server(s).\n\nThe password leak is triggered if an at sign (`@`) is used in the password\nfield, like this: `passw@rd123`. If we also consider a user `dan`, curl would\ngenerate a full URL like:\n\n `https://dan:passw@rd123@example.com/path`",
  "aliases": [
    "CVE-2020-8169"
  ],
  "modified": "2024-06-07T13:53:51Z",
  "published": "2020-06-24T08:00:00Z",
  "database_specific": {
    "CWE": {
      "id": "CWE-200",
      "desc": "Exposure of Sensitive Information to an Unauthorized Actor"
    },
    "award": {
      "amount": "400",
      "currency": "USD"
    },
    "URL": "https://curl.se/docs/CVE-2020-8169.json",
    "package": "curl",
    "severity": "Medium",
    "issue": "https://hackerone.com/reports/874778",
    "www": "https://curl.se/docs/CVE-2020-8169.html",
    "last_affected": "7.70.0"
  },
  "affected": [
    {
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "7.62.0"
            },
            {
              "fixed": "7.71.0"
            }
          ]
        },
        {
          "type": "GIT",
          "repo": "https://github.com/curl/curl.git",
          "events": [
            {
              "introduced": "46e164069d1a5230e4e64cbd2ff46c46cce056bb"
            },
            {
              "fixed": "600a8cded447cd7118ed50142c576567c0cf5158"
            }
          ]
        }
      ],
      "versions": [
        "7.70.0",
        "7.69.1",
        "7.69.0",
        "7.68.0",
        "7.67.0",
        "7.66.0",
        "7.65.3",
        "7.65.2",
        "7.65.1",
        "7.65.0",
        "7.64.1",
        "7.64.0",
        "7.63.0",
        "7.62.0"
      ],
      "database_specific": {
        "source": "https://curl.se/docs/CURL-CVE-2020-8169.json"
      }
    }
  ],
  "schema_version": "1.6.0",
  "credits": [
    {
      "name": "Marek Szlagor",
      "type": "FINDER"
    },
    {
      "name": "Gregory Jefferis",
      "type": "FINDER"
    },
    {
      "name": "Jeroen Ooms",
      "type": "FINDER"
    },
    {
      "name": "Daniel Stenberg",
      "type": "REMEDIATION_DEVELOPER"
    }
  ]
}