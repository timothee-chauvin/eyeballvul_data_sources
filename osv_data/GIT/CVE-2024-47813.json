{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2024-47813.json"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "6e0abd75440159e57e9f1c59a62dbc691eff18a4"
            },
            {
              "fixed": "70ceccd40ecf882908571933b996690f359f0021"
            }
          ],
          "repo": "https://github.com/bytecodealliance/wasmtime",
          "type": "GIT"
        },
        {
          "events": [
            {
              "introduced": "761f044efbb6d7465b88d723619168919b30ce0b"
            },
            {
              "fixed": "6e4dbe359a335dd74d9a6cf88146a94c901497af"
            }
          ],
          "repo": "https://github.com/bytecodealliance/wasmtime",
          "type": "GIT"
        },
        {
          "events": [
            {
              "introduced": "3eb0268a2f2e7cf942d730212518b791d8424a0f"
            },
            {
              "fixed": "72bedc12e00084fdf49f7d4f5d40b979c184b0a5"
            }
          ],
          "repo": "https://github.com/bytecodealliance/wasmtime",
          "type": "GIT"
        },
        {
          "events": [
            {
              "introduced": "6fc3d274c7994dad20c816ccc0739bf766b39a11"
            },
            {
              "fixed": "eb421594ea75049c8351a932506f671260f670e6"
            }
          ],
          "repo": "https://github.com/bytecodealliance/wasmtime",
          "type": "GIT"
        },
        {
          "events": [
            {
              "introduced": "0b195ef5db76c02fb5392ec1418c58bdc5537d41"
            },
            {
              "fixed": "52a565bb9d8ae2f8652171fc0e7b3e81e2a3f4f4"
            }
          ],
          "repo": "https://github.com/bytecodealliance/wasmtime",
          "type": "GIT"
        }
      ],
      "versions": [
        "v22.0.0",
        "v23.0.0",
        "v23.0.1",
        "v23.0.2",
        "v24.0.0",
        "v25.0.0",
        "v25.0.1"
      ]
    }
  ],
  "aliases": [
    "GHSA-7qmx-3fpx-r45m",
    "RUSTSEC-2024-0439"
  ],
  "details": "Wasmtime is an open source runtime for WebAssembly. Under certain concurrent event orderings, a `wasmtime::Engine`'s internal type registry was susceptible to double-unregistration bugs due to a race condition, leading to panics and potentially type registry corruption. That registry corruption could, following an additional and particular sequence of concurrent events, lead to violations of WebAssembly's control-flow integrity (CFI) and type safety. Users that do not use `wasmtime::Engine` across multiple threads are not affected. Users that only create new modules across threads over time are additionally not affected. Reproducing this bug requires creating and dropping multiple type instances (such as `wasmtime::FuncType` or `wasmtime::ArrayType`) concurrently on multiple threads, where all types are associated with the same `wasmtime::Engine`. **Wasm guests cannot trigger this bug.** See the \"References\" section below for a list of Wasmtime types-related APIs that are affected. Wasmtime maintains an internal registry of types within a `wasmtime::Engine` and an engine is shareable across threads. Types can be created and referenced through creation of a `wasmtime::Module`, creation of `wasmtime::FuncType`, or a number of other APIs where the host creates a function (see \"References\" below). Each of these cases interacts with an engine to deduplicate type information and manage type indices that are used to implement type checks in WebAssembly's `call_indirect` function, for example. This bug is a race condition in this management where the internal type registry could be corrupted to trigger an assert or contain invalid state. Wasmtime's internal representation of a type has individual types (e.g. one-per-host-function) maintain a registration count of how many time it's been used. Types additionally have state within an engine behind a read-write lock such as lookup/deduplication information. The race here is a time-of-check versus time-of-use (TOCTOU) bug where one thread atomically decrements a type entry's registration count, observes zero registrations, and then acquires a lock in order to unregister that entry. However, between when this first thread observed the zero-registration count and when it acquires that lock, another thread could perform the following sequence of events: re-register another copy of the type, which deduplicates to that same entry, resurrecting it and incrementing its registration count; then drop the type and decrement its registration count; observe that the registration count is now zero; acquire the type registry lock; and finally unregister the type. Now, when the original thread finally acquires the lock and unregisters the entry, it is the second time this entry has been unregistered. This bug was originally introduced in Wasmtime 19's development of the WebAssembly GC proposal. This bug affects users who are not using the GC proposal, however, and affects Wasmtime in its default configuration even when the GC proposal is disabled. Wasmtime users using 19.0.0 and after are all affected by this issue. We have released the following Wasmtime versions, all of which have a fix for this bug: * 21.0.2 * 22.0.1 * 23.0.3 * 24.0.1 * 25.0.2. If your application creates and drops Wasmtime types on multiple threads concurrently, there are no known workarounds. Users are encouraged to upgrade to a patched release.",
  "id": "CVE-2024-47813",
  "modified": "2025-10-15T14:56:45.799220Z",
  "published": "2024-10-09T18:07:49Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-7qmx-3fpx-r45m"
    },
    {
      "type": "FIX",
      "url": "https://github.com/bytecodealliance/wasmtime/pull/7969"
    }
  ],
  "related": [
    "CGA-gjjh-q4xg-fjw4",
    "CGA-vx7v-xf4j-jwqg",
    "CGA-x6r2-g5c2-44p2"
  ],
  "schema_version": "1.7.3",
  "severity": [
    {
      "score": "CVSS:3.1/AV:L/AC:H/PR:H/UI:R/S:U/C:N/I:L/A:L",
      "type": "CVSS_V3"
    }
  ],
  "summary": "Wasmtime race condition could lead to WebAssembly control-flow integrity and type safety violations"
}