{"schema_version":"1.7.3","id":"CVE-2023-41325","published":"2023-09-15T19:40:58Z","modified":"2025-10-22T18:39:16.330648Z","aliases":["GHSA-jrw7-63cq-7vhm"],"summary":"OP-TEE double free in shdr_verify_signature","details":"OP-TEE is a Trusted Execution Environment (TEE) designed as companion to a non-secure Linux kernel running on Arm; Cortex-A cores using the TrustZone technology. Starting in version 3.20 and prior to version 3.22, `shdr_verify_signature` can make a double free. `shdr_verify_signature` used to verify a TA binary before it is loaded. To verify a signature of it, allocate a memory for RSA key. RSA key allocate function (`sw_crypto_acipher_alloc_rsa_public_key`) will try to allocate a memory (which is optee’s heap memory). RSA key is consist of exponent and modulus (represent as variable `e`, `n`) and it allocation is not atomic way, so it may succeed in `e` but fail in `n`. In this case sw_crypto_acipher_alloc_rsa_public_key` will free on `e` and return as it is failed but variable ‘e’ is remained as already freed memory address . `shdr_verify_signature` will free again that memory (which is `e`) even it is freed when it failed allocate RSA key. A patch is available in version 3.22. No known workarounds are available.","affected":[{"ranges":[{"type":"GIT","repo":"https://github.com/op-tee/optee_os","events":[{"introduced":"8e74d47616a20eaa23ca692f4bbbf917a236ed94"},{"fixed":"001ace6655dd6bb9cbe31aa31b4ba69746e1a1d9"}]}],"versions":["3.20.0","3.21.0","3.21.0-rc1","3.22.0-rc1"],"database_specific":{"source":"https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2023-41325.json"}}],"references":[{"type":"ADVISORY","url":"https://github.com/OP-TEE/optee_os/security/advisories/GHSA-jrw7-63cq-7vhm"},{"type":"FIX","url":"https://github.com/OP-TEE/optee_os/commit/e2ec831cb07ed0099535c7c140cb6338aa62816a"}],"database_specific":{"cwe_ids":["CWE-415"]},"severity":[{"type":"CVSS_V3","score":"CVSS:3.1/AV:L/AC:L/PR:H/UI:R/S:C/C:H/I:H/A:N"}]}