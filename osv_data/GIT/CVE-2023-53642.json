{"schema_version":"1.7.3","id":"CVE-2023-53642","published":"2025-10-07T15:19:41Z","modified":"2025-10-21T17:46:04.008838Z","summary":"x86: fix clear_user_rep_good() exception handling annotation","details":"In the Linux kernel, the following vulnerability has been resolved:\n\nx86: fix clear_user_rep_good() exception handling annotation\n\nThis code no longer exists in mainline, because it was removed in\ncommit d2c95f9d6802 (\"x86: don't use REP_GOOD or ERMS for user memory\nclearing\") upstream.\n\nHowever, rather than backport the full range of x86 memory clearing and\ncopying cleanups, fix the exception table annotation placement for the\nfinal 'rep movsb' in clear_user_rep_good(): rather than pointing at the\nactual instruction that did the user space access, it pointed to the\nregister move just before it.\n\nThat made sense from a code flow standpoint, but not from an actual\nusage standpoint: it means that if user access takes an exception, the\nexception handler won't actually find the instruction in the exception\ntables.\n\nAs a result, rather than fixing it up and returning -EFAULT, it would\nthen turn it into a kernel oops report instead, something like:\n\n    BUG: unable to handle page fault for address: 0000000020081000\n    #PF: supervisor write access in kernel mode\n    #PF: error_code(0x0002) - not-present page\n    ...\n    RIP: 0010:clear_user_rep_good+0x1c/0x30 arch/x86/lib/clear_page_64.S:147\n    ...\n    Call Trace:\n      __clear_user arch/x86/include/asm/uaccess_64.h:103 [inline]\n      clear_user arch/x86/include/asm/uaccess_64.h:124 [inline]\n      iov_iter_zero+0x709/0x1290 lib/iov_iter.c:800\n      iomap_dio_hole_iter fs/iomap/direct-io.c:389 [inline]\n      iomap_dio_iter fs/iomap/direct-io.c:440 [inline]\n      __iomap_dio_rw+0xe3d/0x1cd0 fs/iomap/direct-io.c:601\n      iomap_dio_rw+0x40/0xa0 fs/iomap/direct-io.c:689\n      ext4_dio_read_iter fs/ext4/file.c:94 [inline]\n      ext4_file_read_iter+0x4be/0x690 fs/ext4/file.c:145\n      call_read_iter include/linux/fs.h:2183 [inline]\n      do_iter_readv_writev+0x2e0/0x3b0 fs/read_write.c:733\n      do_iter_read+0x2f2/0x750 fs/read_write.c:796\n      vfs_readv+0xe5/0x150 fs/read_write.c:916\n      do_preadv+0x1b6/0x270 fs/read_write.c:1008\n      __do_sys_preadv2 fs/read_write.c:1070 [inline]\n      __se_sys_preadv2 fs/read_write.c:1061 [inline]\n      __x64_sys_preadv2+0xef/0x150 fs/read_write.c:1061\n      do_syscall_x64 arch/x86/entry/common.c:50 [inline]\n      do_syscall_64+0x39/0xb0 arch/x86/entry/common.c:80\n      entry_SYSCALL_64_after_hwframe+0x63/0xcd\n\nwhich then looks like a filesystem bug rather than the incorrect\nexception annotation that it is.\n\n[ The alternative to this one-liner fix is to take the upstream series\n  that cleans this all up:\n\n    68674f94ffc9 (\"x86: don't use REP_GOOD or ERMS for small memory copies\")\n    20f3337d350c (\"x86: don't use REP_GOOD or ERMS for small memory clearing\")\n    adfcf4231b8c (\"x86: don't use REP_GOOD or ERMS for user memory copies\")\n  * d2c95f9d6802 (\"x86: don't use REP_GOOD or ERMS for user memory clearing\")\n    3639a535587d (\"x86: move stac/clac from user copy routines into callers\")\n    577e6a7fd50d (\"x86: inline the 'rep movs' in user copies for the FSRM case\")\n    8c9b6a88b7e2 (\"x86: improve on the non-rep 'clear_user' function\")\n    427fda2c8a49 (\"x86: improve on the non-rep 'copy_user' function\")\n  * e046fe5a36a9 (\"x86: set FSRS automatically on AMD CPUs that have FSRM\")\n    e1f2750edc4a (\"x86: remove 'zerorest' argument from __copy_user_nocache()\")\n    034ff37d3407 (\"x86: rewrite '__copy_user_nocache' function\")\n\n  with either the whole series or at a minimum the two marked commits\n  being needed to fix this issue ]","affected":[{"ranges":[{"type":"GIT","repo":"https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git","events":[{"introduced":"0db7058e8e23e6bbab1b4747ecabd1784c34f50b"},{"fixed":"76ce32682635fe907e0f8e64e039e773e5c7508f"}]},{"type":"GIT","repo":"https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git","events":[{"introduced":"0db7058e8e23e6bbab1b4747ecabd1784c34f50b"},{"fixed":"e046fe5a36a970bc14fbfbcb2074a48776f6b671"}]}],"versions":["v6.0","v6.0-rc2","v6.0-rc3","v6.0-rc4","v6.0-rc5","v6.0-rc6","v6.0-rc7","v6.1","v6.1-rc1","v6.1-rc2","v6.1-rc3","v6.1-rc4","v6.1-rc5","v6.1-rc6","v6.1-rc7","v6.1-rc8","v6.1.1","v6.1.10","v6.1.11","v6.1.12","v6.1.13","v6.1.14","v6.1.15","v6.1.16","v6.1.17","v6.1.18","v6.1.19","v6.1.2","v6.1.20","v6.1.21","v6.1.22","v6.1.23","v6.1.24","v6.1.25","v6.1.26","v6.1.27","v6.1.28","v6.1.3","v6.1.4","v6.1.5","v6.1.6","v6.1.7","v6.1.8","v6.1.9","v6.2","v6.2-rc1","v6.2-rc2","v6.2-rc3","v6.2-rc4","v6.2-rc5","v6.2-rc6","v6.2-rc7","v6.2-rc8","v6.3-rc1","v6.3-rc2","v6.3-rc3","v6.3-rc4","v6.3-rc5","v6.3-rc6","v6.3-rc7"],"database_specific":{"source":"https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2023-53642.json"}},{"package":{"name":"Kernel","ecosystem":"Linux"},"ranges":[{"type":"ECOSYSTEM","events":[{"introduced":"6.1.0"},{"fixed":"6.1.29"}]}],"database_specific":{"source":"https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2023-53642.json"}}],"references":[{"type":"PACKAGE","url":"https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git"},{"type":"WEB","url":"https://git.kernel.org/stable/c/76ce32682635fe907e0f8e64e039e773e5c7508f"},{"type":"WEB","url":"https://git.kernel.org/stable/c/e046fe5a36a970bc14fbfbcb2074a48776f6b671"}]}