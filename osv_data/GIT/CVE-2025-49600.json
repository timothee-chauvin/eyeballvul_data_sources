{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2025-49600.json"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "8c89224991adff88d53cd380f42a2baa36f91454"
            },
            {
              "fixed": "c765c831e5c2a0971410692f92f7a81d6ec65ec2"
            }
          ],
          "repo": "https://github.com/armmbed/mbedtls",
          "type": "GIT"
        }
      ],
      "versions": [
        "mbedtls-3.3.0",
        "mbedtls-3.4.0",
        "mbedtls-3.4.1",
        "mbedtls-3.5.0",
        "mbedtls-3.5.1",
        "mbedtls-3.5.2",
        "mbedtls-3.6.0",
        "mbedtls-3.6.1",
        "mbedtls-3.6.2",
        "mbedtls-3.6.3",
        "v3.3.0",
        "v3.4.0",
        "v3.4.1",
        "v3.5.0",
        "v3.5.1",
        "v3.5.2",
        "v3.6.0",
        "v3.6.1",
        "v3.6.2",
        "v3.6.3",
        "v3.6.3.1"
      ]
    }
  ],
  "details": "In MbedTLS 3.3.0 before 3.6.4, mbedtls_lms_verify may accept invalid signatures if hash computation fails and internal errors go unchecked, enabling LMS (Leighton-Micali Signature) forgery in a fault scenario. Specifically, unchecked return values in mbedtls_lms_verify allow an attacker (who can induce a hardware hash accelerator fault) to bypass LMS signature verification by reusing stale stack data, resulting in acceptance of an invalid signature. In mbedtls_lms_verify, the return values of the internal Merkle tree functions create_merkle_leaf_value and create_merkle_internal_value are not checked. These functions return an integer that indicates whether the call succeeded or not. If a failure occurs, the output buffer (Tc_candidate_root_node) may remain uninitialized, and the result of the signature verification is unpredictable. When the software implementation of SHA-256 is used, these functions will not fail. However, with hardware-accelerated hashing, an attacker could use fault injection against the accelerator to bypass verification.",
  "id": "CVE-2025-49600",
  "modified": "2025-10-22T16:17:55.293340Z",
  "published": "2025-07-04T15:15:22Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://github.com/Mbed-TLS/mbedtls-docs/blob/main/security-advisories/mbedtls-security-advisory-2025-06-3.md"
    }
  ],
  "schema_version": "1.7.3",
  "severity": [
    {
      "score": "CVSS:3.1/AV:P/AC:H/PR:N/UI:N/S:C/C:N/I:H/A:N",
      "type": "CVSS_V3"
    }
  ]
}