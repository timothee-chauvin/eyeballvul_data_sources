{
  "id": "CVE-2020-11105",
  "details": "An issue was discovered in USC iLab cereal through 1.3.0. It employs caching of std::shared_ptr values, using the raw pointer address as a unique identifier. This becomes problematic if an std::shared_ptr variable goes out of scope and is freed, and a new std::shared_ptr is allocated at the same address. Serialization fidelity thereby becomes dependent upon memory layout. In short, serialized std::shared_ptr variables cannot always be expected to serialize back into their original values. This can have any number of consequences, depending on the context within which this manifests.",
  "modified": "2025-01-14T08:14:07.744673Z",
  "published": "2020-03-30T22:15:15Z",
  "related": [
    "openSUSE-SU-2024:12197-1"
  ],
  "references": [
    {
      "type": "REPORT",
      "url": "https://github.com/USCiLab/cereal/issues/636"
    }
  ],
  "affected": [
    {
      "ranges": [
        {
          "type": "GIT",
          "repo": "https://github.com/uscilab/cereal",
          "events": [
            {
              "introduced": "0"
            },
            {
              "last_affected": "02eace19a99ce3cd564ca4e379753d69af08c2c8"
            }
          ]
        }
      ],
      "versions": [
        "v0.9.0",
        "v0.9.1",
        "v1.0.0",
        "v1.1.0",
        "v1.1.1",
        "v1.1.2",
        "v1.2.0",
        "v1.2.1",
        "v1.2.2",
        "v1.3.0"
      ],
      "database_specific": {
        "source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2020-11105.json"
      }
    }
  ],
  "schema_version": "1.6.0",
  "severity": [
    {
      "type": "CVSS_V3",
      "score": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
    }
  ]
}