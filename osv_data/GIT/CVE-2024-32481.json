{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2024-32481.json"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "036f153683e0d55b890305eb4c77680a0872fcba"
            },
            {
              "fixed": "6fb750af3972160f871f62bb49a44827acf06423"
            }
          ],
          "repo": "https://github.com/vyperlang/vyper",
          "type": "GIT"
        }
      ],
      "versions": [
        "v0.3.10",
        "v0.3.10rc1",
        "v0.3.10rc2",
        "v0.3.10rc3",
        "v0.3.10rc4",
        "v0.3.10rc5",
        "v0.3.8",
        "v0.3.9"
      ]
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2024-32481.json"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "036f153683e0d55b890305eb4c77680a0872fcba"
            },
            {
              "last_affected": "6fb750af3972160f871f62bb49a44827acf06423"
            }
          ],
          "repo": "https://github.com/vyperlang/vyper",
          "type": "GIT"
        }
      ],
      "versions": [
        "v0.3.10",
        "v0.3.10rc1",
        "v0.3.10rc2",
        "v0.3.10rc3",
        "v0.3.10rc4",
        "v0.3.10rc5",
        "v0.3.8",
        "v0.3.9",
        "v0.4.0b1"
      ]
    }
  ],
  "aliases": [
    "GHSA-ppx5-q359-pvwj",
    "PYSEC-2024-246"
  ],
  "details": "Vyper is a pythonic Smart Contract Language for the Ethereum virtual machine. Starting in version 0.3.8 and prior to version 0.4.0b1, when looping over a `range` of the form `range(start, start + N)`, if `start` is negative, the execution will always revert. This issue is caused by an incorrect assertion inserted by the code generation of the range `stmt.parse_For_range()`. The issue arises when `start` is signed, instead of using `sle`, `le` is used and `start` is interpreted as an unsigned integer for the comparison. If it is a negative number, its 255th bit is set to `1` and is hence interpreted as a very large unsigned integer making the assertion always fail. Any contract having a `range(start, start + N)` where `start` is a signed integer with the possibility for `start` to be negative is affected. If a call goes through the loop while supplying a negative `start` the execution will revert. Version 0.4.0b1 fixes the issue.",
  "id": "CVE-2024-32481",
  "modified": "2025-10-15T09:24:49.633217Z",
  "published": "2024-04-25T17:00:54Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://github.com/vyperlang/vyper/security/advisories/GHSA-ppx5-q359-pvwj"
    },
    {
      "type": "FIX",
      "url": "https://github.com/vyperlang/vyper/commit/3de1415ee77a9244eb04bdb695e249d3ec9ed868"
    },
    {
      "type": "FIX",
      "url": "https://github.com/vyperlang/vyper/commit/5319cfbe14951e007ccdb323257e5ada869b35d5"
    },
    {
      "type": "WEB",
      "url": "https://github.com/vyperlang/vyper/blob/9136169468f317a53b4e7448389aa315f90b95ba/vyper/codegen/stmt.py#L286-L287"
    }
  ],
  "schema_version": "1.7.3",
  "severity": [
    {
      "score": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
      "type": "CVSS_V3"
    }
  ],
  "summary": "vyper's range(start, start + N) reverts for negative numbers"
}