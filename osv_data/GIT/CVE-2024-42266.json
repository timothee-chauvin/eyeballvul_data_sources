{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2024-42266.json",
        "vanir_signatures": [
          {
            "deprecated": false,
            "digest": {
              "function_hash": "267527205174116662441881118847100160211",
              "length": 770.0
            },
            "id": "CVE-2024-42266-3418b86b",
            "signature_type": "Function",
            "signature_version": "v1",
            "source": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git@478574370bef7951fbd9ef5155537d6cbed49472",
            "target": {
              "file": "fs/btrfs/inode.c",
              "function": "cow_file_range_inline"
            }
          },
          {
            "deprecated": false,
            "digest": {
              "line_hashes": [
                "147406016457758099481673072220389216340",
                "266574559768497659690781861164983542842",
                "100837851596143590616884840399982838888",
                "131196474276065186429179009730046386118",
                "188835129018177100150512064929366067979",
                "1130951656271459071669346742553859979",
                "99073818185646831215353299913350655837",
                "292555515400827386766862988730598601247",
                "123847258741662459356642075144994071012",
                "194072249961719175613544425027660765994",
                "106992128800181202872130660257081285471",
                "177477926828581399512478722667078206122",
                "157544684575167375937596684483148384646",
                "221862832840643180006907587082417519608",
                "119922613900865222642581069044452610056",
                "21146862670445910775878085010245519821",
                "31345071544410256768619405811854737792",
                "98258630686052441555604775525884690799",
                "96680625091929980132662458553358434149",
                "153077705618552378713238260284970170218"
              ],
              "threshold": 0.9
            },
            "id": "CVE-2024-42266-7752c09d",
            "signature_type": "Line",
            "signature_version": "v1",
            "source": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git@478574370bef7951fbd9ef5155537d6cbed49472",
            "target": {
              "file": "fs/btrfs/inode.c"
            }
          },
          {
            "deprecated": false,
            "digest": {
              "function_hash": "283203719454865209525710781741664973023",
              "length": 3498.0
            },
            "id": "CVE-2024-42266-d54df5a7",
            "signature_type": "Function",
            "signature_version": "v1",
            "source": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git@478574370bef7951fbd9ef5155537d6cbed49472",
            "target": {
              "file": "fs/btrfs/inode.c",
              "function": "cow_file_range"
            }
          },
          {
            "deprecated": false,
            "digest": {
              "function_hash": "87368695592266973549227621480621206453",
              "length": 2820.0
            },
            "id": "CVE-2024-42266-ec5f0db2",
            "signature_type": "Function",
            "signature_version": "v1",
            "source": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git@478574370bef7951fbd9ef5155537d6cbed49472",
            "target": {
              "file": "fs/btrfs/inode.c",
              "function": "compress_file_range"
            }
          }
        ]
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0586d0a89e77d717da14df42648ace4a9fd67981"
            },
            {
              "fixed": "061e41581606000a83ce0f0f01d6ad338f3704e9"
            }
          ],
          "repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
          "type": "GIT"
        },
        {
          "events": [
            {
              "introduced": "0586d0a89e77d717da14df42648ace4a9fd67981"
            },
            {
              "fixed": "478574370bef7951fbd9ef5155537d6cbed49472"
            }
          ],
          "repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
          "type": "GIT"
        }
      ],
      "versions": [
        "v6.10",
        "v6.10-rc1",
        "v6.10-rc2",
        "v6.10-rc3",
        "v6.10-rc4",
        "v6.10-rc5",
        "v6.10-rc6",
        "v6.10-rc7",
        "v6.10.1",
        "v6.10.2",
        "v6.10.3",
        "v6.9"
      ]
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2024-42266.json"
      },
      "package": {
        "ecosystem": "Linux",
        "name": "Kernel"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "6.10.0"
            },
            {
              "fixed": "6.10.4"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:\n\nbtrfs: make cow_file_range_inline() honor locked_page on error\n\nThe btrfs buffered write path runs through __extent_writepage() which\nhas some tricky return value handling for writepage_delalloc().\nSpecifically, when that returns 1, we exit, but for other return values\nwe continue and end up calling btrfs_folio_end_all_writers(). If the\nfolio has been unlocked (note that we check the PageLocked bit at the\nstart of __extent_writepage()), this results in an assert panic like\nthis one from syzbot:\n\n  BTRFS: error (device loop0 state EAL) in free_log_tree:3267: errno=-5 IO failure\n  BTRFS warning (device loop0 state EAL): Skipping commit of aborted transaction.\n  BTRFS: error (device loop0 state EAL) in cleanup_transaction:2018: errno=-5 IO failure\n  assertion failed: folio_test_locked(folio), in fs/btrfs/subpage.c:871\n  ------------[ cut here ]------------\n  kernel BUG at fs/btrfs/subpage.c:871!\n  Oops: invalid opcode: 0000 [#1] PREEMPT SMP KASAN PTI\n  CPU: 1 PID: 5090 Comm: syz-executor225 Not tainted\n  6.10.0-syzkaller-05505-gb1bc554e009e #0\n  Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS\n  Google 06/27/2024\n  RIP: 0010:btrfs_folio_end_all_writers+0x55b/0x610 fs/btrfs/subpage.c:871\n  Code: e9 d3 fb ff ff e8 25 22 c2 fd 48 c7 c7 c0 3c 0e 8c 48 c7 c6 80 3d\n  0e 8c 48 c7 c2 60 3c 0e 8c b9 67 03 00 00 e8 66 47 ad 07 90 <0f> 0b e8\n  6e 45 b0 07 4c 89 ff be 08 00 00 00 e8 21 12 25 fe 4c 89\n  RSP: 0018:ffffc900033d72e0 EFLAGS: 00010246\n  RAX: 0000000000000045 RBX: 00fff0000000402c RCX: 663b7a08c50a0a00\n  RDX: 0000000000000000 RSI: 0000000080000000 RDI: 0000000000000000\n  RBP: ffffc900033d73b0 R08: ffffffff8176b98c R09: 1ffff9200067adfc\n  R10: dffffc0000000000 R11: fffff5200067adfd R12: 0000000000000001\n  R13: dffffc0000000000 R14: 0000000000000000 R15: ffffea0001cbee80\n  FS:  0000000000000000(0000) GS:ffff8880b9500000(0000)\n  knlGS:0000000000000000\n  CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\n  CR2: 00007f5f076012f8 CR3: 000000000e134000 CR4: 00000000003506f0\n  DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\n  DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\n  Call Trace:\n  <TASK>\n  __extent_writepage fs/btrfs/extent_io.c:1597 [inline]\n  extent_write_cache_pages fs/btrfs/extent_io.c:2251 [inline]\n  btrfs_writepages+0x14d7/0x2760 fs/btrfs/extent_io.c:2373\n  do_writepages+0x359/0x870 mm/page-writeback.c:2656\n  filemap_fdatawrite_wbc+0x125/0x180 mm/filemap.c:397\n  __filemap_fdatawrite_range mm/filemap.c:430 [inline]\n  __filemap_fdatawrite mm/filemap.c:436 [inline]\n  filemap_flush+0xdf/0x130 mm/filemap.c:463\n  btrfs_release_file+0x117/0x130 fs/btrfs/file.c:1547\n  __fput+0x24a/0x8a0 fs/file_table.c:422\n  task_work_run+0x24f/0x310 kernel/task_work.c:222\n  exit_task_work include/linux/task_work.h:40 [inline]\n  do_exit+0xa2f/0x27f0 kernel/exit.c:877\n  do_group_exit+0x207/0x2c0 kernel/exit.c:1026\n  __do_sys_exit_group kernel/exit.c:1037 [inline]\n  __se_sys_exit_group kernel/exit.c:1035 [inline]\n  __x64_sys_exit_group+0x3f/0x40 kernel/exit.c:1035\n  x64_sys_call+0x2634/0x2640\n  arch/x86/include/generated/asm/syscalls_64.h:232\n  do_syscall_x64 arch/x86/entry/common.c:52 [inline]\n  do_syscall_64+0xf3/0x230 arch/x86/entry/common.c:83\n  entry_SYSCALL_64_after_hwframe+0x77/0x7f\n  RIP: 0033:0x7f5f075b70c9\n  Code: Unable to access opcode bytes at\n  0x7f5f075b709f.\n\nI was hitting the same issue by doing hundreds of accelerated runs of\ngeneric/475, which also hits IO errors by design.\n\nI instrumented that reproducer with bpftrace and found that the\nundesirable folio_unlock was coming from the following callstack:\n\n  folio_unlock+5\n  __process_pages_contig+475\n  cow_file_range_inline.constprop.0+230\n  cow_file_range+803\n  btrfs_run_delalloc_range+566\n  writepage_delalloc+332\n  __extent_writepage # inlined in my stacktrace, but I added it here\n  extent_write_cache_pages+622\n\nLooking at the bisected-to pa\n---truncated---",
  "id": "CVE-2024-42266",
  "modified": "2025-10-15T13:32:10.882354Z",
  "published": "2024-08-17T08:54:22Z",
  "references": [
    {
      "type": "PACKAGE",
      "url": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git"
    },
    {
      "type": "WEB",
      "url": "https://git.kernel.org/stable/c/061e41581606000a83ce0f0f01d6ad338f3704e9"
    },
    {
      "type": "WEB",
      "url": "https://git.kernel.org/stable/c/478574370bef7951fbd9ef5155537d6cbed49472"
    }
  ],
  "schema_version": "1.7.3",
  "summary": "btrfs: make cow_file_range_inline() honor locked_page on error"
}