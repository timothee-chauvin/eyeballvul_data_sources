{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2024-45311.json"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0e9a19665a8afc26d3ad66a6f7e8b361960d235b"
            },
            {
              "fixed": "c26e8cd2f781e2cf83aa6cac09fd051ddc25a4e8"
            }
          ],
          "repo": "https://github.com/quinn-rs/quinn",
          "type": "GIT"
        }
      ],
      "versions": [
        "0.11.0",
        "0.11.1",
        "0.11.2",
        "quinn-0.11.2",
        "quinn-0.11.3",
        "quinn-proto-0.11.3",
        "quinn-proto-0.11.4",
        "quinn-proto-0.11.5",
        "quinn-proto-0.11.6",
        "quinn-udp-0.5.2",
        "quinn-udp-0.5.3",
        "quinn-udp-0.5.4"
      ]
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2024-45311.json"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0e9a19665a8afc26d3ad66a6f7e8b361960d235b"
            },
            {
              "fixed": "c26e8cd2f781e2cf83aa6cac09fd051ddc25a4e8"
            }
          ],
          "repo": "https://github.com/quinn-rs/quinn",
          "type": "GIT"
        }
      ],
      "versions": [
        "0.11.0",
        "0.11.1",
        "0.11.2",
        "quinn-0.11.2",
        "quinn-0.11.3",
        "quinn-proto-0.11.3",
        "quinn-proto-0.11.4",
        "quinn-proto-0.11.5",
        "quinn-proto-0.11.6",
        "quinn-udp-0.5.2",
        "quinn-udp-0.5.3",
        "quinn-udp-0.5.4"
      ]
    }
  ],
  "aliases": [
    "GHSA-vr26-jcq5-fjj8",
    "RUSTSEC-2024-0373"
  ],
  "details": "Quinn is a pure-Rust, async-compatible implementation of the IETF QUIC transport protocol. As of quinn-proto 0.11, it is possible for a server to `accept()`, `retry()`, `refuse()`, or `ignore()` an `Incoming` connection. However, calling `retry()` on an unvalidated connection exposes the server to a likely panic in the following situations:  1. Calling `refuse` or `ignore` on the resulting validated connection, if a duplicate initial packet is received. This issue can go undetected until a server's `refuse()`/`ignore()` code path is exercised, such as to stop a denial of service attack. 2. Accepting when the initial packet for the resulting validated connection fails to decrypt or exhausts connection IDs, if a similar initial packet that successfully decrypts and doesn't exhaust connection IDs is received. This issue can go undetected if clients are well-behaved. The former situation was observed in a real application, while the latter is only theoretical.",
  "id": "CVE-2024-45311",
  "modified": "2025-10-15T13:49:03.682233Z",
  "published": "2024-09-02T16:45:39Z",
  "references": [
    {
      "type": "ADVISORY",
      "url": "https://github.com/quinn-rs/quinn/security/advisories/GHSA-vr26-jcq5-fjj8"
    },
    {
      "type": "FIX",
      "url": "https://github.com/quinn-rs/quinn/commit/e01609ccd8738bd438d86fa7185a0f85598cb58f"
    },
    {
      "type": "WEB",
      "url": "https://github.com/quinn-rs/quinn/blob/bb02a12a8435a7732a1d762783eeacbb7e50418e/quinn-proto/src/endpoint.rs#L213"
    }
  ],
  "related": [
    "CGA-6j6x-xqqf-gxgj",
    "CGA-fmh7-xwqm-xf4p",
    "CGA-fwmr-jxq6-6v7x",
    "CGA-mmm5-8q9j-5wvr"
  ],
  "schema_version": "1.7.3",
  "severity": [
    {
      "score": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "type": "CVSS_V3"
    }
  ],
  "summary": "Denial of service in quinn-proto when using `Endpoint::retry()`"
}