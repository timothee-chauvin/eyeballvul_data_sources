{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2025-22030.json"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "8d29ff5d50304daa41dc3cfdda4a9d1e46cf5be1"
            },
            {
              "fixed": "747e3eec1d7d124ea90ed3d7b85369df8b4e36d2"
            }
          ],
          "repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
          "type": "GIT"
        },
        {
          "events": [
            {
              "introduced": "12dcb0ef540629a281533f9dedc1b6b8e14cfb65"
            },
            {
              "fixed": "a8d18000e9d2d97aaf105f5f9b3b0e8a6fbf8b96"
            }
          ],
          "repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
          "type": "GIT"
        },
        {
          "events": [
            {
              "introduced": "12dcb0ef540629a281533f9dedc1b6b8e14cfb65"
            },
            {
              "fixed": "717d9c35deff6c33235693171bacbb03e9643fa4"
            }
          ],
          "repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
          "type": "GIT"
        },
        {
          "events": [
            {
              "introduced": "12dcb0ef540629a281533f9dedc1b6b8e14cfb65"
            },
            {
              "fixed": "c11bcbc0a517acf69282c8225059b2a8ac5fe628"
            }
          ],
          "repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
          "type": "GIT"
        }
      ],
      "versions": [
        "v6.12.12",
        "v6.12.13",
        "v6.12.14",
        "v6.12.15",
        "v6.12.16",
        "v6.12.17",
        "v6.12.18",
        "v6.12.19",
        "v6.12.20",
        "v6.12.21",
        "v6.12.22",
        "v6.13",
        "v6.13-rc7",
        "v6.13.1",
        "v6.13.10",
        "v6.13.2",
        "v6.13.3",
        "v6.13.4",
        "v6.13.5",
        "v6.13.6",
        "v6.13.7",
        "v6.13.8",
        "v6.13.9",
        "v6.14",
        "v6.14-rc1",
        "v6.14-rc2",
        "v6.14-rc3",
        "v6.14-rc4",
        "v6.14-rc5",
        "v6.14-rc6",
        "v6.14-rc7",
        "v6.14.1"
      ]
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2025-22030.json"
      },
      "package": {
        "ecosystem": "Linux",
        "name": "Kernel"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "0"
            },
            {
              "fixed": "6.12.23"
            }
          ],
          "type": "ECOSYSTEM"
        },
        {
          "events": [
            {
              "introduced": "6.13.0"
            },
            {
              "fixed": "6.13.11"
            }
          ],
          "type": "ECOSYSTEM"
        },
        {
          "events": [
            {
              "introduced": "6.13.0"
            },
            {
              "fixed": "6.14.2"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:\n\nmm: zswap: fix crypto_free_acomp() deadlock in zswap_cpu_comp_dead()\n\nCurrently, zswap_cpu_comp_dead() calls crypto_free_acomp() while holding\nthe per-CPU acomp_ctx mutex.  crypto_free_acomp() then holds scomp_lock\n(through crypto_exit_scomp_ops_async()).\n\nOn the other hand, crypto_alloc_acomp_node() holds the scomp_lock (through\ncrypto_scomp_init_tfm()), and then allocates memory.  If the allocation\nresults in reclaim, we may attempt to hold the per-CPU acomp_ctx mutex.\n\nThe above dependencies can cause an ABBA deadlock.  For example in the\nfollowing scenario:\n\n(1) Task A running on CPU #1:\n    crypto_alloc_acomp_node()\n      Holds scomp_lock\n      Enters reclaim\n      Reads per_cpu_ptr(pool->acomp_ctx, 1)\n\n(2) Task A is descheduled\n\n(3) CPU #1 goes offline\n    zswap_cpu_comp_dead(CPU #1)\n      Holds per_cpu_ptr(pool->acomp_ctx, 1))\n      Calls crypto_free_acomp()\n      Waits for scomp_lock\n\n(4) Task A running on CPU #2:\n      Waits for per_cpu_ptr(pool->acomp_ctx, 1) // Read on CPU #1\n      DEADLOCK\n\nSince there is no requirement to call crypto_free_acomp() with the per-CPU\nacomp_ctx mutex held in zswap_cpu_comp_dead(), move it after the mutex is\nunlocked.  Also move the acomp_request_free() and kfree() calls for\nconsistency and to avoid any potential sublte locking dependencies in the\nfuture.\n\nWith this, only setting acomp_ctx fields to NULL occurs with the mutex\nheld.  This is similar to how zswap_cpu_comp_prepare() only initializes\nacomp_ctx fields with the mutex held, after performing all allocations\nbefore holding the mutex.\n\nOpportunistically, move the NULL check on acomp_ctx so that it takes place\nbefore the mutex dereference.",
  "id": "CVE-2025-22030",
  "modified": "2025-10-15T23:11:25.876175Z",
  "published": "2025-04-16T14:11:50Z",
  "references": [
    {
      "type": "PACKAGE",
      "url": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git"
    },
    {
      "type": "WEB",
      "url": "https://git.kernel.org/stable/c/717d9c35deff6c33235693171bacbb03e9643fa4"
    },
    {
      "type": "WEB",
      "url": "https://git.kernel.org/stable/c/747e3eec1d7d124ea90ed3d7b85369df8b4e36d2"
    },
    {
      "type": "WEB",
      "url": "https://git.kernel.org/stable/c/a8d18000e9d2d97aaf105f5f9b3b0e8a6fbf8b96"
    },
    {
      "type": "WEB",
      "url": "https://git.kernel.org/stable/c/c11bcbc0a517acf69282c8225059b2a8ac5fe628"
    }
  ],
  "related": [
    "SUSE-SU-2025:01919-1",
    "SUSE-SU-2025:01951-1",
    "SUSE-SU-2025:01964-1",
    "SUSE-SU-2025:01965-1",
    "SUSE-SU-2025:01967-1"
  ],
  "schema_version": "1.7.3",
  "summary": "mm: zswap: fix crypto_free_acomp() deadlock in zswap_cpu_comp_dead()"
}