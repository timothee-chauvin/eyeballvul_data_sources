{
  "affected": [
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2024-46797.json"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "84990b169557428c318df87b7836cd15f65b62dc"
            },
            {
              "fixed": "d84ab6661e8d09092de9b034b016515ef9b66085"
            }
          ],
          "repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
          "type": "GIT"
        },
        {
          "events": [
            {
              "introduced": "84990b169557428c318df87b7836cd15f65b62dc"
            },
            {
              "fixed": "f06af737e4be28c0e926dc25d5f0a111da4e2987"
            }
          ],
          "repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
          "type": "GIT"
        },
        {
          "events": [
            {
              "introduced": "84990b169557428c318df87b7836cd15f65b62dc"
            },
            {
              "fixed": "734ad0af3609464f8f93e00b6c0de1e112f44559"
            }
          ],
          "repo": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git",
          "type": "GIT"
        }
      ],
      "versions": [
        "v6.1",
        "v6.1-rc3",
        "v6.1-rc4",
        "v6.1-rc5",
        "v6.1-rc6",
        "v6.1-rc7",
        "v6.1-rc8",
        "v6.10",
        "v6.10-rc1",
        "v6.10-rc2",
        "v6.10-rc3",
        "v6.10-rc4",
        "v6.10-rc5",
        "v6.10-rc6",
        "v6.10-rc7",
        "v6.10.1",
        "v6.10.2",
        "v6.10.3",
        "v6.10.4",
        "v6.10.5",
        "v6.10.6",
        "v6.10.7",
        "v6.10.8",
        "v6.10.9",
        "v6.11-rc1",
        "v6.11-rc2",
        "v6.2",
        "v6.2-rc1",
        "v6.2-rc2",
        "v6.2-rc3",
        "v6.2-rc4",
        "v6.2-rc5",
        "v6.2-rc6",
        "v6.2-rc7",
        "v6.2-rc8",
        "v6.3",
        "v6.3-rc1",
        "v6.3-rc2",
        "v6.3-rc3",
        "v6.3-rc4",
        "v6.3-rc5",
        "v6.3-rc6",
        "v6.3-rc7",
        "v6.4",
        "v6.4-rc1",
        "v6.4-rc2",
        "v6.4-rc3",
        "v6.4-rc4",
        "v6.4-rc5",
        "v6.4-rc6",
        "v6.4-rc7",
        "v6.5",
        "v6.5-rc1",
        "v6.5-rc2",
        "v6.5-rc3",
        "v6.5-rc4",
        "v6.5-rc5",
        "v6.5-rc6",
        "v6.5-rc7",
        "v6.6",
        "v6.6-rc1",
        "v6.6-rc2",
        "v6.6-rc3",
        "v6.6-rc4",
        "v6.6-rc5",
        "v6.6-rc6",
        "v6.6-rc7",
        "v6.6.1",
        "v6.6.10",
        "v6.6.11",
        "v6.6.12",
        "v6.6.13",
        "v6.6.14",
        "v6.6.15",
        "v6.6.16",
        "v6.6.17",
        "v6.6.18",
        "v6.6.19",
        "v6.6.2",
        "v6.6.20",
        "v6.6.21",
        "v6.6.22",
        "v6.6.23",
        "v6.6.24",
        "v6.6.25",
        "v6.6.26",
        "v6.6.27",
        "v6.6.28",
        "v6.6.29",
        "v6.6.3",
        "v6.6.30",
        "v6.6.31",
        "v6.6.32",
        "v6.6.33",
        "v6.6.34",
        "v6.6.35",
        "v6.6.36",
        "v6.6.37",
        "v6.6.38",
        "v6.6.39",
        "v6.6.4",
        "v6.6.40",
        "v6.6.41",
        "v6.6.42",
        "v6.6.43",
        "v6.6.44",
        "v6.6.45",
        "v6.6.46",
        "v6.6.47",
        "v6.6.48",
        "v6.6.49",
        "v6.6.5",
        "v6.6.50",
        "v6.6.6",
        "v6.6.7",
        "v6.6.8",
        "v6.6.9",
        "v6.7",
        "v6.7-rc1",
        "v6.7-rc2",
        "v6.7-rc3",
        "v6.7-rc4",
        "v6.7-rc5",
        "v6.7-rc6",
        "v6.7-rc7",
        "v6.7-rc8",
        "v6.8",
        "v6.8-rc1",
        "v6.8-rc2",
        "v6.8-rc3",
        "v6.8-rc4",
        "v6.8-rc5",
        "v6.8-rc6",
        "v6.8-rc7",
        "v6.9",
        "v6.9-rc1",
        "v6.9-rc2",
        "v6.9-rc3",
        "v6.9-rc4",
        "v6.9-rc5",
        "v6.9-rc6",
        "v6.9-rc7"
      ]
    },
    {
      "database_specific": {
        "source": "https://storage.googleapis.com/cve-osv-conversion/osv-output/CVE-2024-46797.json"
      },
      "package": {
        "ecosystem": "Linux",
        "name": "Kernel"
      },
      "ranges": [
        {
          "events": [
            {
              "introduced": "6.2.0"
            },
            {
              "fixed": "6.6.51"
            }
          ],
          "type": "ECOSYSTEM"
        },
        {
          "events": [
            {
              "introduced": "6.7.0"
            },
            {
              "fixed": "6.10.10"
            }
          ],
          "type": "ECOSYSTEM"
        }
      ],
      "versions": []
    }
  ],
  "details": "In the Linux kernel, the following vulnerability has been resolved:\n\npowerpc/qspinlock: Fix deadlock in MCS queue\n\nIf an interrupt occurs in queued_spin_lock_slowpath() after we increment\nqnodesp->count and before node->lock is initialized, another CPU might\nsee stale lock values in get_tail_qnode(). If the stale lock value happens\nto match the lock on that CPU, then we write to the \"next\" pointer of\nthe wrong qnode. This causes a deadlock as the former CPU, once it becomes\nthe head of the MCS queue, will spin indefinitely until it's \"next\" pointer\nis set by its successor in the queue.\n\nRunning stress-ng on a 16 core (16EC/16VP) shared LPAR, results in\noccasional lockups similar to the following:\n\n   $ stress-ng --all 128 --vm-bytes 80% --aggressive \\\n               --maximize --oomable --verify  --syslog \\\n               --metrics  --times  --timeout 5m\n\n   watchdog: CPU 15 Hard LOCKUP\n   ......\n   NIP [c0000000000b78f4] queued_spin_lock_slowpath+0x1184/0x1490\n   LR [c000000001037c5c] _raw_spin_lock+0x6c/0x90\n   Call Trace:\n    0xc000002cfffa3bf0 (unreliable)\n    _raw_spin_lock+0x6c/0x90\n    raw_spin_rq_lock_nested.part.135+0x4c/0xd0\n    sched_ttwu_pending+0x60/0x1f0\n    __flush_smp_call_function_queue+0x1dc/0x670\n    smp_ipi_demux_relaxed+0xa4/0x100\n    xive_muxed_ipi_action+0x20/0x40\n    __handle_irq_event_percpu+0x80/0x240\n    handle_irq_event_percpu+0x2c/0x80\n    handle_percpu_irq+0x84/0xd0\n    generic_handle_irq+0x54/0x80\n    __do_irq+0xac/0x210\n    __do_IRQ+0x74/0xd0\n    0x0\n    do_IRQ+0x8c/0x170\n    hardware_interrupt_common_virt+0x29c/0x2a0\n   --- interrupt: 500 at queued_spin_lock_slowpath+0x4b8/0x1490\n   ......\n   NIP [c0000000000b6c28] queued_spin_lock_slowpath+0x4b8/0x1490\n   LR [c000000001037c5c] _raw_spin_lock+0x6c/0x90\n   --- interrupt: 500\n    0xc0000029c1a41d00 (unreliable)\n    _raw_spin_lock+0x6c/0x90\n    futex_wake+0x100/0x260\n    do_futex+0x21c/0x2a0\n    sys_futex+0x98/0x270\n    system_call_exception+0x14c/0x2f0\n    system_call_vectored_common+0x15c/0x2ec\n\nThe following code flow illustrates how the deadlock occurs.\nFor the sake of brevity, assume that both locks (A and B) are\ncontended and we call the queued_spin_lock_slowpath() function.\n\n        CPU0                                   CPU1\n        ----                                   ----\n  spin_lock_irqsave(A)                          |\n  spin_unlock_irqrestore(A)                     |\n    spin_lock(B)                                |\n         |                                      |\n         \u25bc                                      |\n   id = qnodesp->count++;                       |\n  (Note that nodes[0].lock == A)                |\n         |                                      |\n         \u25bc                                      |\n      Interrupt                                 |\n  (happens before \"nodes[0].lock = B\")          |\n         |                                      |\n         \u25bc                                      |\n  spin_lock_irqsave(A)                          |\n         |                                      |\n         \u25bc                                      |\n   id = qnodesp->count++                        |\n   nodes[1].lock = A                            |\n         |                                      |\n         \u25bc                                      |\n  Tail of MCS queue                             |\n         |                             spin_lock_irqsave(A)\n         \u25bc                                      |\n  Head of MCS queue                             \u25bc\n         |                             CPU0 is previous tail\n         \u25bc                                      |\n   Spin indefinitely                            \u25bc\n  (until \"nodes[1].next != NULL\")      prev = get_tail_qnode(A, CPU0)\n                                                |\n                                                \u25bc\n                                       prev == &qnodes[CPU0].nodes[0]\n                                     (as qnodes\n---truncated---",
  "id": "CVE-2024-46797",
  "modified": "2025-10-22T02:58:25.957153Z",
  "published": "2024-09-18T07:12:51Z",
  "references": [
    {
      "type": "PACKAGE",
      "url": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git"
    },
    {
      "type": "WEB",
      "url": "https://git.kernel.org/stable/c/734ad0af3609464f8f93e00b6c0de1e112f44559"
    },
    {
      "type": "WEB",
      "url": "https://git.kernel.org/stable/c/d84ab6661e8d09092de9b034b016515ef9b66085"
    },
    {
      "type": "WEB",
      "url": "https://git.kernel.org/stable/c/f06af737e4be28c0e926dc25d5f0a111da4e2987"
    }
  ],
  "related": [
    "MGASA-2024-0316",
    "MGASA-2024-0318",
    "SUSE-SU-2024:3551-1",
    "SUSE-SU-2024:3553-1",
    "SUSE-SU-2024:3561-1",
    "SUSE-SU-2024:3564-1",
    "SUSE-SU-2024:3984-1",
    "SUSE-SU-2024:3986-1",
    "SUSE-SU-2024:4318-1",
    "SUSE-SU-2024:4387-1"
  ],
  "schema_version": "1.7.3",
  "summary": "powerpc/qspinlock: Fix deadlock in MCS queue"
}